{"ast":null,"code":"import _classCallCheck from \"/Users/juanmiguel/Documents/Full stack folder/Pet lover/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/juanmiguel/Documents/Full stack folder/Pet lover/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/juanmiguel/Documents/Full stack folder/Pet lover/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/juanmiguel/Documents/Full stack folder/Pet lover/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { R as RequestHandler, e as getUrlByMask, m as matchRequestUrl, g as getPublicUrlFromRequest, f as prepareRequest, h as prepareResponse, i as getTimestamp, j as getStatusCodeColor } from './RequestHandler-deps.js';\nimport { b as set, s as status, e as json, d as delay, f as fetch } from './fetch-deps.js';\nimport { c as cookie, b as body, t as text, x as xml } from './xml-deps.js';\n/**\r\n * Performs a case-insensitive comparison of two given strings.\r\n */\n\nfunction isStringEqual(actual, expected) {\n  return actual.toLowerCase() === expected.toLowerCase();\n}\n\nvar RESTMethods;\n\n(function (RESTMethods) {\n  RESTMethods[\"HEAD\"] = \"HEAD\";\n  RESTMethods[\"GET\"] = \"GET\";\n  RESTMethods[\"POST\"] = \"POST\";\n  RESTMethods[\"PUT\"] = \"PUT\";\n  RESTMethods[\"PATCH\"] = \"PATCH\";\n  RESTMethods[\"OPTIONS\"] = \"OPTIONS\";\n  RESTMethods[\"DELETE\"] = \"DELETE\";\n})(RESTMethods || (RESTMethods = {}));\n\nvar restContext = {\n  set: set,\n  status: status,\n  cookie: cookie,\n  body: body,\n  text: text,\n  json: json,\n  xml: xml,\n  delay: delay,\n  fetch: fetch\n};\n/**\r\n * Request handler for REST API requests.\r\n * Provides request matching based on method and URL.\r\n */\n\nvar RestHandler = /*#__PURE__*/function (_RequestHandler) {\n  _inherits(RestHandler, _RequestHandler);\n\n  var _super = _createSuper(RestHandler);\n\n  function RestHandler(method, mask, resolver) {\n    var _this;\n\n    _classCallCheck(this, RestHandler);\n\n    _this = _super.call(this, {\n      info: {\n        header: \"\".concat(method, \" \").concat(mask),\n        mask: mask,\n        method: method\n      },\n      ctx: restContext,\n      resolver: resolver\n    });\n\n    _this.checkRedundantQueryParameters();\n\n    return _this;\n  }\n\n  _createClass(RestHandler, [{\n    key: \"checkRedundantQueryParameters\",\n    value: function checkRedundantQueryParameters() {\n      var _this$info = this.info,\n          method = _this$info.method,\n          mask = _this$info.mask;\n      var resolvedMask = getUrlByMask(mask);\n\n      if (resolvedMask instanceof URL && resolvedMask.search !== '') {\n        var queryParams = [];\n        resolvedMask.searchParams.forEach(function (_, paramName) {\n          queryParams.push(paramName);\n        });\n        console.warn(\"[MSW] Found a redundant usage of query parameters in the request handler URL for \\\"\".concat(method, \" \").concat(mask, \"\\\". Please match against a path instead, and access query parameters in the response resolver function:\\n\\nrest.\").concat(method.toLowerCase(), \"(\\\"\").concat(resolvedMask.pathname, \"\\\", (req, res, ctx) => {\\n  const query = req.url.searchParams\\n\").concat(queryParams.map(function (paramName) {\n          return \"  const \".concat(paramName, \" = query.get(\\\"\").concat(paramName, \"\\\")\");\n        }).join('\\n'), \"\\n})      \"));\n      }\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(request) {\n      return matchRequestUrl(request.url, this.info.mask);\n    }\n  }, {\n    key: \"getPublicRequest\",\n    value: function getPublicRequest(request, parsedResult) {\n      return Object.assign(Object.assign({}, request), {\n        params: parsedResult.params || {}\n      });\n    }\n  }, {\n    key: \"predicate\",\n    value: function predicate(request, parsedResult) {\n      return isStringEqual(this.info.method, request.method) && parsedResult.matches;\n    }\n  }, {\n    key: \"log\",\n    value: function log(request, response) {\n      var publicUrl = getPublicUrlFromRequest(request);\n      var loggedRequest = prepareRequest(request);\n      var loggedResponse = prepareResponse(response);\n      console.groupCollapsed('[MSW] %s %s %s (%c%s%c)', getTimestamp(), request.method, publicUrl, \"color:\".concat(getStatusCodeColor(response.status)), response.status, 'color:inherit');\n      console.log('Request', loggedRequest);\n      console.log('Handler:', {\n        mask: this.info.mask,\n        resolver: this.resolver\n      });\n      console.log('Response', loggedResponse);\n      console.groupEnd();\n    }\n  }]);\n\n  return RestHandler;\n}(RequestHandler);\n\nfunction createRestHandler(method) {\n  return function (mask, resolver) {\n    return new RestHandler(method, mask, resolver);\n  };\n}\n\nvar rest = {\n  head: createRestHandler(RESTMethods.HEAD),\n  get: createRestHandler(RESTMethods.GET),\n  post: createRestHandler(RESTMethods.POST),\n  put: createRestHandler(RESTMethods.PUT),\n  delete: createRestHandler(RESTMethods.DELETE),\n  patch: createRestHandler(RESTMethods.PATCH),\n  options: createRestHandler(RESTMethods.OPTIONS)\n};\nexport { RestHandler as R, RESTMethods as a, restContext as b, isStringEqual as i, rest as r };","map":{"version":3,"names":["R","RequestHandler","e","getUrlByMask","m","matchRequestUrl","g","getPublicUrlFromRequest","f","prepareRequest","h","prepareResponse","i","getTimestamp","j","getStatusCodeColor","b","set","s","status","json","d","delay","fetch","c","cookie","body","t","text","x","xml","isStringEqual","actual","expected","toLowerCase","RESTMethods","restContext","RestHandler","method","mask","resolver","info","header","ctx","checkRedundantQueryParameters","resolvedMask","URL","search","queryParams","searchParams","forEach","_","paramName","push","console","warn","pathname","map","join","request","url","parsedResult","Object","assign","params","matches","response","publicUrl","loggedRequest","loggedResponse","groupCollapsed","log","groupEnd","createRestHandler","rest","head","HEAD","get","GET","post","POST","put","PUT","delete","DELETE","patch","PATCH","options","OPTIONS","a","r"],"sources":["/Users/juanmiguel/Documents/Full stack folder/Pet lover/node_modules/msw/lib/esm/rest-deps.js"],"sourcesContent":["import { R as RequestHandler, e as getUrlByMask, m as matchRequestUrl, g as getPublicUrlFromRequest, f as prepareRequest, h as prepareResponse, i as getTimestamp, j as getStatusCodeColor } from './RequestHandler-deps.js';\nimport { b as set, s as status, e as json, d as delay, f as fetch } from './fetch-deps.js';\nimport { c as cookie, b as body, t as text, x as xml } from './xml-deps.js';\n\n/**\r\n * Performs a case-insensitive comparison of two given strings.\r\n */\r\nfunction isStringEqual(actual, expected) {\r\n    return actual.toLowerCase() === expected.toLowerCase();\r\n}\n\nvar RESTMethods;\r\n(function (RESTMethods) {\r\n    RESTMethods[\"HEAD\"] = \"HEAD\";\r\n    RESTMethods[\"GET\"] = \"GET\";\r\n    RESTMethods[\"POST\"] = \"POST\";\r\n    RESTMethods[\"PUT\"] = \"PUT\";\r\n    RESTMethods[\"PATCH\"] = \"PATCH\";\r\n    RESTMethods[\"OPTIONS\"] = \"OPTIONS\";\r\n    RESTMethods[\"DELETE\"] = \"DELETE\";\r\n})(RESTMethods || (RESTMethods = {}));\r\nconst restContext = {\r\n    set,\r\n    status,\r\n    cookie,\r\n    body,\r\n    text,\r\n    json,\r\n    xml,\r\n    delay,\r\n    fetch,\r\n};\r\n/**\r\n * Request handler for REST API requests.\r\n * Provides request matching based on method and URL.\r\n */\r\nclass RestHandler extends RequestHandler {\r\n    constructor(method, mask, resolver) {\r\n        super({\r\n            info: {\r\n                header: `${method} ${mask}`,\r\n                mask,\r\n                method,\r\n            },\r\n            ctx: restContext,\r\n            resolver,\r\n        });\r\n        this.checkRedundantQueryParameters();\r\n    }\r\n    checkRedundantQueryParameters() {\r\n        const { method, mask } = this.info;\r\n        const resolvedMask = getUrlByMask(mask);\r\n        if (resolvedMask instanceof URL && resolvedMask.search !== '') {\r\n            const queryParams = [];\r\n            resolvedMask.searchParams.forEach((_, paramName) => {\r\n                queryParams.push(paramName);\r\n            });\r\n            console.warn(`\\\n[MSW] Found a redundant usage of query parameters in the request handler URL for \"${method} ${mask}\". Please match against a path instead, and access query parameters in the response resolver function:\n\nrest.${method.toLowerCase()}(\"${resolvedMask.pathname}\", (req, res, ctx) => {\n  const query = req.url.searchParams\n${queryParams\r\n                .map((paramName) => `\\\n  const ${paramName} = query.get(\"${paramName}\")`)\r\n                .join('\\n')}\n})\\\n      `);\r\n        }\r\n    }\r\n    parse(request) {\r\n        return matchRequestUrl(request.url, this.info.mask);\r\n    }\r\n    getPublicRequest(request, parsedResult) {\r\n        return Object.assign(Object.assign({}, request), { params: parsedResult.params || {} });\r\n    }\r\n    predicate(request, parsedResult) {\r\n        return (isStringEqual(this.info.method, request.method) && parsedResult.matches);\r\n    }\r\n    log(request, response) {\r\n        const publicUrl = getPublicUrlFromRequest(request);\r\n        const loggedRequest = prepareRequest(request);\r\n        const loggedResponse = prepareResponse(response);\r\n        console.groupCollapsed('[MSW] %s %s %s (%c%s%c)', getTimestamp(), request.method, publicUrl, `color:${getStatusCodeColor(response.status)}`, response.status, 'color:inherit');\r\n        console.log('Request', loggedRequest);\r\n        console.log('Handler:', {\r\n            mask: this.info.mask,\r\n            resolver: this.resolver,\r\n        });\r\n        console.log('Response', loggedResponse);\r\n        console.groupEnd();\r\n    }\r\n}\n\nfunction createRestHandler(method) {\r\n    return (mask, resolver) => {\r\n        return new RestHandler(method, mask, resolver);\r\n    };\r\n}\r\nconst rest = {\r\n    head: createRestHandler(RESTMethods.HEAD),\r\n    get: createRestHandler(RESTMethods.GET),\r\n    post: createRestHandler(RESTMethods.POST),\r\n    put: createRestHandler(RESTMethods.PUT),\r\n    delete: createRestHandler(RESTMethods.DELETE),\r\n    patch: createRestHandler(RESTMethods.PATCH),\r\n    options: createRestHandler(RESTMethods.OPTIONS),\r\n};\n\nexport { RestHandler as R, RESTMethods as a, restContext as b, isStringEqual as i, rest as r };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}